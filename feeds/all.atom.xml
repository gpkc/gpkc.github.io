<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Praciano</title><link href="https://praciano.com.br/" rel="alternate"></link><link href="https://praciano.com.br/feeds/all.atom.xml" rel="self"></link><id>https://praciano.com.br/</id><updated>2018-03-30T00:00:00-03:00</updated><entry><title>Your first Neural Network running in the Front-End using JavaScript</title><link href="https://praciano.com.br/blog/your-first-neural-network-running-in-the-front-end-using-javascript" rel="alternate"></link><published>2018-03-30T00:00:00-03:00</published><updated>2018-03-30T00:00:00-03:00</updated><author><name>Guilherme Caminha</name></author><id>tag:praciano.com.br,2018-03-30:/blog/your-first-neural-network-running-in-the-front-end-using-javascript</id><summary type="html">&lt;p&gt;It’s no news that Machine Learning have become a huge trend lately. However,
it’s also not uncommon for people to avoid using techniques and technologies
based on Machine Learning due to its frightening mathy nature.&lt;/p&gt;
&lt;p&gt;However, that’s not an excuse anymore. There are today several frameworks and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It’s no news that Machine Learning have become a huge trend lately. However,
it’s also not uncommon for people to avoid using techniques and technologies
based on Machine Learning due to its frightening mathy nature.&lt;/p&gt;
&lt;p&gt;However, that’s not an excuse anymore. There are today several frameworks and
libraries that abstract all the complex details and provide a much simpler &lt;span class="caps"&gt;API&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Most of those libraries are found as Python packages, but we are going to explore
a JavaScript package called &lt;a href="https://github.com/BrainJS/brain.js"&gt;Brain.js&lt;/a&gt;,
which has been gaining a lot of traction lately. An alternative is
&lt;a href="https://github.com/cazala/synaptic"&gt;Synaptic&lt;/a&gt;, which is relatively more
flexible and allows for a finer-grained control of your neural network architecture.&lt;/p&gt;
&lt;h1&gt;Brain.js&lt;/h1&gt;
&lt;p&gt;With Brain.js it’s very easy to train and use neural networks, and therefore
make it extremely easy to build predicting systems. All you need is some data,
which can be acquired by prompting the user or an &lt;span class="caps"&gt;API&lt;/span&gt;. This data can then be
directly fed into a Brain.js neural network object and used for training.&lt;/p&gt;
&lt;p&gt;To better visualize how easy this process is, let’s look at an example. First,
you need to obviously install the Brain.js package:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;$ npm install brain.js&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or with yarn:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;$ yarn add brain.js&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also use it directly on the browser, using &lt;a href="https://raw.githubusercontent.com/harthur-org/brain.js/master/browser.js"&gt;this script&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now, let’s take a look at the classic example of approximating the &lt;span class="caps"&gt;XOR&lt;/span&gt; function,
extracted from the Brain.js documentation:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;1&lt;/span&gt;
&lt;span class="code-line"&gt;2&lt;/span&gt;
&lt;span class="code-line"&gt;3&lt;/span&gt;
&lt;span class="code-line"&gt;4&lt;/span&gt;
&lt;span class="code-line"&gt;5&lt;/span&gt;
&lt;span class="code-line"&gt;6&lt;/span&gt;
&lt;span class="code-line"&gt;7&lt;/span&gt;
&lt;span class="code-line"&gt;8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;net&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;brain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NeuralNetwork&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nx"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;train&lt;/span&gt;&lt;span class="p"&gt;([{&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;           &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;           &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;           &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]}]);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;  &lt;span class="c1"&gt;// [0.987]&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Basically, a neural network is a predicting technique. Of course you might look
at the above example and think that it is useless, specially because we already
knew beforehand the result of the &lt;span class="caps"&gt;XOR&lt;/span&gt; operation for the input [1, 0].&lt;/p&gt;
&lt;p&gt;However, we can apply the exact same logic to predict, for example, which soccer
team would win a match given their history. The neural network would take into
account not only the matches between the two teams, but all the other matches as
well. It’s very hard for a human to detect those nuances. You could also insert
more data that you think would be useful, such as the crowd size per match.&lt;/p&gt;
&lt;p&gt;Let’s build a simple soccer example. Our data is composed by the match (e.g.
&lt;code&gt;[0, 1]&lt;/code&gt; means a match between Team 0 and Team 1) and the result (e.g. [1]
means that the second team in the input array won). We could model a draw with,
for example, a 0.5 value. Or we could use the ratio of goals to determine the
output. You are free to test your hypotheses.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="code-line"&gt; 1&lt;/span&gt;
&lt;span class="code-line"&gt; 2&lt;/span&gt;
&lt;span class="code-line"&gt; 3&lt;/span&gt;
&lt;span class="code-line"&gt; 4&lt;/span&gt;
&lt;span class="code-line"&gt; 5&lt;/span&gt;
&lt;span class="code-line"&gt; 6&lt;/span&gt;
&lt;span class="code-line"&gt; 7&lt;/span&gt;
&lt;span class="code-line"&gt; 8&lt;/span&gt;
&lt;span class="code-line"&gt; 9&lt;/span&gt;
&lt;span class="code-line"&gt;10&lt;/span&gt;
&lt;span class="code-line"&gt;11&lt;/span&gt;
&lt;span class="code-line"&gt;12&lt;/span&gt;
&lt;span class="code-line"&gt;13&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt;  &lt;span class="c1"&gt;// Team 1 wins the match&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt;  &lt;span class="c1"&gt;// Team 2 wins the match&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt;  &lt;span class="c1"&gt;// Team 1 wins the match&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;   &lt;span class="c1"&gt;// Team 3 wins the match&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;net&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;brain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NeuralNetwork&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nx"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;train&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;// Who would win the match between Team 0 and Team 3?&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nx"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// [0.9939018487930298] -&amp;gt; high change of Team 3 winning&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Remember, however, that if you are testing parameters, you must segment your data
into a training segment and a testing segment. You would use the training segment
to train your model, and the testing segment to verify its precision. It’s
common to use 80% of the data to train the model, and 20% to verify it.&lt;/p&gt;
&lt;h1&gt;&lt;span class="caps"&gt;MNIST&lt;/span&gt; model&lt;/h1&gt;
&lt;p&gt;&lt;img alt="mnist digits" src="https://upload.wikimedia.org/wikipedia/commons/2/27/MnistExamples.png" title="MNIST Digits"/&gt;&lt;/p&gt;
&lt;p&gt;Let’s now build a more realistic model using the &lt;a href="https://en.wikipedia.org/wiki/MNIST_database"&gt;&lt;span class="caps"&gt;MNIST&lt;/span&gt;&lt;/a&gt;
dataset. It consists of several digits written by hand. We will use the
pre-built &lt;a href="https://github.com/cazala/mnist"&gt;&lt;span class="caps"&gt;MNIST&lt;/span&gt; package for Node.js&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I’ve created a repository with the code for this example. You can grab it
&lt;a href="https://github.com/gpkc/MNIST-Node"&gt;here&lt;/a&gt;. It consists of a small library
that will train a model using a subset of the &lt;span class="caps"&gt;MNIST&lt;/span&gt; dataset, and then try to
predict some handwritten digits.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Photo" src="https://praciano.com.br/blog/your-first-neural-network-running-in-the-front-end-using-javascript/mnist_model.png"/&gt;&lt;/p&gt;
&lt;h3&gt;src/train.js&lt;/h3&gt;
&lt;p&gt;This is our training file. It is responsible for providing some helper functions
for training our model, and creating the Neural Network itself. When we use the
&lt;code&gt;mnist[digit].get()&lt;/code&gt; method, the mnist library will return a random instance
of the digit we have passed between brackets.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="code-line"&gt; 1&lt;/span&gt;
&lt;span class="code-line"&gt; 2&lt;/span&gt;
&lt;span class="code-line"&gt; 3&lt;/span&gt;
&lt;span class="code-line"&gt; 4&lt;/span&gt;
&lt;span class="code-line"&gt; 5&lt;/span&gt;
&lt;span class="code-line"&gt; 6&lt;/span&gt;
&lt;span class="code-line"&gt; 7&lt;/span&gt;
&lt;span class="code-line"&gt; 8&lt;/span&gt;
&lt;span class="code-line"&gt; 9&lt;/span&gt;
&lt;span class="code-line"&gt;10&lt;/span&gt;
&lt;span class="code-line"&gt;11&lt;/span&gt;
&lt;span class="code-line"&gt;12&lt;/span&gt;
&lt;span class="code-line"&gt;13&lt;/span&gt;
&lt;span class="code-line"&gt;14&lt;/span&gt;
&lt;span class="code-line"&gt;15&lt;/span&gt;
&lt;span class="code-line"&gt;16&lt;/span&gt;
&lt;span class="code-line"&gt;17&lt;/span&gt;
&lt;span class="code-line"&gt;18&lt;/span&gt;
&lt;span class="code-line"&gt;19&lt;/span&gt;
&lt;span class="code-line"&gt;20&lt;/span&gt;
&lt;span class="code-line"&gt;21&lt;/span&gt;
&lt;span class="code-line"&gt;22&lt;/span&gt;
&lt;span class="code-line"&gt;23&lt;/span&gt;
&lt;span class="code-line"&gt;24&lt;/span&gt;
&lt;span class="code-line"&gt;25&lt;/span&gt;
&lt;span class="code-line"&gt;26&lt;/span&gt;
&lt;span class="code-line"&gt;27&lt;/span&gt;
&lt;span class="code-line"&gt;28&lt;/span&gt;
&lt;span class="code-line"&gt;29&lt;/span&gt;
&lt;span class="code-line"&gt;30&lt;/span&gt;
&lt;span class="code-line"&gt;31&lt;/span&gt;
&lt;span class="code-line"&gt;32&lt;/span&gt;
&lt;span class="code-line"&gt;33&lt;/span&gt;
&lt;span class="code-line"&gt;34&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mnist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'mnist'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;brain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'brain.js'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;net&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;brain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NeuralNetwork&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;random_digit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value_str&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s2"&gt;"input"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;mnist&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s2"&gt;"output"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;};&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;train_rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sample_size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;sample_size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;random_digit&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nx"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;train&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;net_result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;digit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;brain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;likely&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;digit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;net&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random_digit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;random_digit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;train_rand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;train_rand&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;net_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;net_result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;After we’re done with the train.js file, we can simply use browserify to
create a self-contained script that can be imported from the browser. I’ve
included a npm script to help with that:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;$ npm run build&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;index.html&lt;/h3&gt;
&lt;p&gt;From our html file, we can simply import our generated script. Here is how
I am using the functions from the &lt;code&gt;train.js&lt;/code&gt; file:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="code-line"&gt; 1&lt;/span&gt;
&lt;span class="code-line"&gt; 2&lt;/span&gt;
&lt;span class="code-line"&gt; 3&lt;/span&gt;
&lt;span class="code-line"&gt; 4&lt;/span&gt;
&lt;span class="code-line"&gt; 5&lt;/span&gt;
&lt;span class="code-line"&gt; 6&lt;/span&gt;
&lt;span class="code-line"&gt; 7&lt;/span&gt;
&lt;span class="code-line"&gt; 8&lt;/span&gt;
&lt;span class="code-line"&gt; 9&lt;/span&gt;
&lt;span class="code-line"&gt;10&lt;/span&gt;
&lt;span class="code-line"&gt;11&lt;/span&gt;
&lt;span class="code-line"&gt;12&lt;/span&gt;
&lt;span class="code-line"&gt;13&lt;/span&gt;
&lt;span class="code-line"&gt;14&lt;/span&gt;
&lt;span class="code-line"&gt;15&lt;/span&gt;
&lt;span class="code-line"&gt;16&lt;/span&gt;
&lt;span class="code-line"&gt;17&lt;/span&gt;
&lt;span class="code-line"&gt;18&lt;/span&gt;
&lt;span class="code-line"&gt;19&lt;/span&gt;
&lt;span class="code-line"&gt;20&lt;/span&gt;
&lt;span class="code-line"&gt;21&lt;/span&gt;
&lt;span class="code-line"&gt;22&lt;/span&gt;
&lt;span class="code-line"&gt;23&lt;/span&gt;
&lt;span class="code-line"&gt;24&lt;/span&gt;
&lt;span class="code-line"&gt;25&lt;/span&gt;
&lt;span class="code-line"&gt;26&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"./dist/train.js"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nx"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"mnistCanvas"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"2d"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;digit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;random_digit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;inverted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;digit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nx"&gt;mnist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inverted&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;net_result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;digit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resultElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"result"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nx"&gt;resultElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;};&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nx"&gt;train_NN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"train_button"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;disabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sample_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"sample_size"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nx"&gt;train_rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sample_size&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"train_button"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;disabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"next_button"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;disabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;These two functions are callbacks for the two buttons in the page.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;next&lt;/code&gt; function will update a canvas in the page to show the current digit, then
it tries to guess what digit it is by calling the &lt;code&gt;net_result&lt;/code&gt; function, and
finally displays the guess in the screen. The &lt;code&gt;train_NN&lt;/code&gt; function will simply
train our model by calling &lt;code&gt;train_rand&lt;/code&gt; with the number of samples from the
&lt;span class="caps"&gt;MNIST&lt;/span&gt; dataset the training process should use.&lt;/p&gt;
&lt;p&gt;If you increase the sample size, the model will become much more accurate. However,
increasing it too much will cause the training process to take a long time. It
will take hours to train with the whole dataset. That can be accelerated by
using &lt;span class="caps"&gt;GPU&lt;/span&gt; training. Brain.js supports &lt;span class="caps"&gt;GPU&lt;/span&gt; training with the &lt;code&gt;NeuralNetworkGPU&lt;/code&gt;
class, which uses &lt;a href="http://gpu.rocks/"&gt;gpu.js&lt;/a&gt; under the hood. However, this
feature is not well supported yet.&lt;/p&gt;
&lt;h1&gt;Summary&lt;/h1&gt;
&lt;p&gt;We have seen how to import and use Brain.js in practice, and discussed some
ways to model the input and output of our training data. We have also seen
a practical example using a large dataset to train our model.&lt;/p&gt;
&lt;p&gt;Of course there are several downsides of using the current &lt;span class="caps"&gt;JS&lt;/span&gt; ecosystem for
machine learning instead of using Python, for example. However, this is a great
way to display simpler results to the end user training directly on the browser,
instead of sending the data to be trained on a server.&lt;/p&gt;
&lt;p&gt;There are also other tools for this task, such as &lt;a href="https://js.tensorflow.org/"&gt;TensorFlow.js&lt;/a&gt;
and &lt;a href="https://github.com/cazala/synaptic"&gt;Synaptic&lt;/a&gt;. Also, it’s worth mentioning
&lt;a href="https://github.com/NaturalNode/natural"&gt;natural&lt;/a&gt;, which is a package for
Natural Language processing, which provides common algorithms such as
&lt;a href="https://en.wikipedia.org/wiki/Tf%E2%80%93idf"&gt;tf-idf&lt;/a&gt;.&lt;/p&gt;</content><category term="brain.js"></category><category term="machine learning"></category><category term="nodejs"></category></entry><entry><title>Building documented REST applications with Python and flask_apispec (Part I)</title><link href="https://praciano.com.br/blog/building-your-first-rest-application-with-python-and-flask-part-i" rel="alternate"></link><published>2018-03-25T00:00:00-03:00</published><updated>2018-03-25T00:00:00-03:00</updated><author><name>Guilherme Caminha</name></author><id>tag:praciano.com.br,2018-03-25:/blog/building-your-first-rest-application-with-python-and-flask-part-i</id><summary type="html">&lt;p&gt;This is the first article in my blog, and the first article in a series that
I’m planning to build, which will cover the whole process of building a Backend
application and deploying it using DevOps techniques, including Continuous
Integration and Continuous Deployment.&lt;/p&gt;
&lt;p&gt;We will cover everything from Dockerizing …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is the first article in my blog, and the first article in a series that
I’m planning to build, which will cover the whole process of building a Backend
application and deploying it using DevOps techniques, including Continuous
Integration and Continuous Deployment.&lt;/p&gt;
&lt;p&gt;We will cover everything from Dockerizing your application, to building test
pipelines and deploying it to the cloud. Notice, however, that there tutorials
are not meant for absolute beginners. You must have some basic knowledge on the topics.
If you feel overwhelmed, try to read the many links I’m providing throughout the
posts and stepping back a bit before continuing.&lt;/p&gt;
&lt;p&gt;So, let’s start from beginning: building a RESTful &lt;span class="caps"&gt;API&lt;/span&gt; that will then be
deployed. This &lt;span class="caps"&gt;API&lt;/span&gt; can later be consumed by third party applications, or a
Frontend application that you are planning to build.&lt;/p&gt;
&lt;p&gt;Currently there are several options for someone who wants to build a RESTful
&lt;span class="caps"&gt;API&lt;/span&gt; with Python. Below is a small and not at all comprehensive list containing
some of those options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://python-eve.org"&gt;eve&lt;/a&gt; - Eve is an open source package for building
 &lt;span class="caps"&gt;REST&lt;/span&gt; APIs. Its motto is “a framework designed for human beings”.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flask-restful.readthedocs.io/"&gt;Flask-RESTful&lt;/a&gt; - Flask-RESTful is
 mature package for building RESTful applications.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.django-rest-framework.org/"&gt;Django &lt;span class="caps"&gt;REST&lt;/span&gt; framework&lt;/a&gt; - Of course
 we couldn’t let Django &lt;span class="caps"&gt;REST&lt;/span&gt; framework out of this list. This is probably
 the biggest and more overkill option that you can get for building a simple
 &lt;span class="caps"&gt;REST&lt;/span&gt; application, however one of the most tested and reliable options out there.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://falconframework.org/"&gt;Falcon&lt;/a&gt; - Falcon is built to support a
 microservices based architecture, and is very fast compared to other common
 &lt;span class="caps"&gt;REST&lt;/span&gt; frameworks.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For this tutorial we are going to be hipsters and not use any of the above
options directly, because why not? Let’s build our own solution using the
vast Python ecosystem.&lt;/p&gt;
&lt;p&gt;We will build a RESTful &lt;span class="caps"&gt;API&lt;/span&gt; using &lt;a href="https://github.com/jmcarp/flask-apispec"&gt;flask-apispec&lt;/a&gt;,
which itself uses &lt;a href="https://webargs.readthedocs.io/"&gt;webargs&lt;/a&gt; for argument parsing
and &lt;a href="https://marshmallow.readthedocs.io/"&gt;marshmallow&lt;/a&gt; for response formatting
(also called response &lt;em&gt;marhsalling&lt;/em&gt;, hence the name). It also uses
&lt;a href="https://apispec.readthedocs.io/"&gt;apispec&lt;/a&gt; to automatically generate a Swagger
documentation of our &lt;span class="caps"&gt;API&lt;/span&gt;. If you don’t know what Swagger is, just wait a minute
and you will be amazed, but it is basically a way to &lt;a href="https://swagger.io/specification/"&gt;document and describe
your &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is actually a &lt;a href="https://stackoverflow.com/questions/35078880/flask-methodview-vs-flask-restful-resource"&gt;pretty good solution&lt;/a&gt;,
since Flask-RESTful is &lt;a href="https://github.com/flask-restful/flask-restful/issues/335"&gt;dropping support for its own request parsers&lt;/a&gt;. So, using
webargs and marshmallow directly is a good practice right now in the Flask world.&lt;/p&gt;
&lt;h1&gt;Getting Started&lt;/h1&gt;
&lt;p&gt;I have already set an environment for this tutorial. Go ahead and clone
&lt;a href="https://github.com/gpkc/simple_rest"&gt;this repository&lt;/a&gt;. Then, create a &lt;a href="https://virtualenv.pypa.io"&gt;virtual environment&lt;/a&gt; for our project, and install the
requirements by running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;$ pip install -r requirements.txt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This project comes with two folders: &lt;code&gt;tests&lt;/code&gt; and &lt;code&gt;simple_rest&lt;/code&gt;. The &lt;code&gt;tests&lt;/code&gt; folder
contains, well… tests, while the &lt;code&gt;simple_rest&lt;/code&gt; folder contains our actual application.
This application will be very simple, defining just a user resource, and some methods
to access it.&lt;/p&gt;
&lt;p&gt;To run our application enter the &lt;code&gt;simple_rest&lt;/code&gt; directory and run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;$ python app.py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You should then see something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;* Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)&lt;/span&gt;
&lt;span class="code-line"&gt;* Restarting with stat&lt;/span&gt;
&lt;span class="code-line"&gt;* Debugger is active!&lt;/span&gt;
&lt;span class="code-line"&gt;* Debugger PIN: 127-081-590&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This means that our application is running and we can access the provided link.
It will of course return an error since we haven’t defined any endpoints yet.&lt;/p&gt;
&lt;p&gt;However, we can already access the &lt;code&gt;/swagger&lt;/code&gt; and &lt;code&gt;/swagger-ui&lt;/code&gt; endpoints,
which are generated automatically by the packages we have selected. There is
nothing interesting to be found on those urls yet, though.&lt;/p&gt;
&lt;p&gt;Let’s go through the files that compose our project, and some of their code.&lt;/p&gt;
&lt;h3&gt;simple_rest/app.py&lt;/h3&gt;
&lt;p&gt;This is the main portion of our application. It will connect everything to
our Flask application.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;1&lt;/span&gt;
&lt;span class="code-line"&gt;2&lt;/span&gt;
&lt;span class="code-line"&gt;3&lt;/span&gt;
&lt;span class="code-line"&gt;4&lt;/span&gt;
&lt;span class="code-line"&gt;5&lt;/span&gt;
&lt;span class="code-line"&gt;6&lt;/span&gt;
&lt;span class="code-line"&gt;7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'APISPEC_SPEC'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;APISpec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'simple_rest'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'v1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;plugins&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'apispec.ext.marshmallow'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;))&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'APISPEC_SWAGGER_URL'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'/swagger/'&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Here we construct our Flask object and define some configs on it. Now we are
only using &lt;span class="caps"&gt;APISPEC&lt;/span&gt;-related configs, but here you would usually add, for example, some
&lt;a href="https://www.sqlalchemy.org/"&gt;SQLAlchemy&lt;/a&gt; configs for your Database, among other things.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;1&lt;/span&gt;
&lt;span class="code-line"&gt;2&lt;/span&gt;
&lt;span class="code-line"&gt;3&lt;/span&gt;
&lt;span class="code-line"&gt;4&lt;/span&gt;
&lt;span class="code-line"&gt;5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Register views&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;# from .views import ...&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;# app.add_url_rule('&amp;lt;route&amp;gt;', view_func=&amp;lt;myview&amp;gt;.as_view('&amp;lt;viewname&amp;gt;'))&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;# ...&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;During this series we are going to define some endpoints for our resources. Here
is where we are going to register them in the routing system of our Flask
application. We will replace &lt;code&gt;&amp;lt;route&amp;gt;&lt;/code&gt; with the desired route, &lt;code&gt;&amp;lt;myview&amp;gt;&lt;/code&gt; with
the view class, and &lt;code&gt;&amp;lt;viewname&amp;gt;&lt;/code&gt; is the name of the view. For everything to work
well, you will have to set the &lt;code&gt;&amp;lt;viewname&amp;gt;&lt;/code&gt; as being the lowercased name of the
view class &lt;code&gt;&amp;lt;myview&amp;gt;&lt;/code&gt;. This constraint is necessary for the next step to work.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;1&lt;/span&gt;
&lt;span class="code-line"&gt;2&lt;/span&gt;
&lt;span class="code-line"&gt;3&lt;/span&gt;
&lt;span class="code-line"&gt;4&lt;/span&gt;
&lt;span class="code-line"&gt;5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Register view on apispec&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;docs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FlaskApiSpec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;# docs.register(&amp;lt;myview&amp;gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;# ...&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Here we are registering our views on apispec. This will make the view to appear
in our Swagger specification, basically. I told you in the last step that the
&lt;code&gt;&amp;lt;viewname&amp;gt;&lt;/code&gt; parameter had to be the lowercased name of the &lt;code&gt;&amp;lt;myview&amp;gt;&lt;/code&gt; class name.
This is because &lt;code&gt;flask-apispec&lt;/code&gt; will internally search for this lowercased class name by default:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;1&lt;/span&gt;
&lt;span class="code-line"&gt;2&lt;/span&gt;
&lt;span class="code-line"&gt;3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;endpoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;endpoint&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;rules&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url_map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_rules_by_endpoint&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;(found in the &lt;a href="https://github.com/jmcarp/flask-apispec/blob/c24cb25ca9cdbb1fa823d5e691e927cf60d1c99d/flask_apispec/apidoc.py"&gt;flask_apispec/apidoc.py file&lt;/a&gt;)
You can, however, use the &lt;code&gt;endpoint&lt;/code&gt; optional argument to the &lt;code&gt;register&lt;/code&gt; method
to match the &lt;code&gt;&amp;lt;viewname&amp;gt;&lt;/code&gt; argument.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="code-line"&gt; 1&lt;/span&gt;
&lt;span class="code-line"&gt; 2&lt;/span&gt;
&lt;span class="code-line"&gt; 3&lt;/span&gt;
&lt;span class="code-line"&gt; 4&lt;/span&gt;
&lt;span class="code-line"&gt; 5&lt;/span&gt;
&lt;span class="code-line"&gt; 6&lt;/span&gt;
&lt;span class="code-line"&gt; 7&lt;/span&gt;
&lt;span class="code-line"&gt; 8&lt;/span&gt;
&lt;span class="code-line"&gt; 9&lt;/span&gt;
&lt;span class="code-line"&gt;10&lt;/span&gt;
&lt;span class="code-line"&gt;11&lt;/span&gt;
&lt;span class="code-line"&gt;12&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@app.errorhandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nd"&gt;@marshal_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ErrorSchema&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_not_found&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;exc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'description'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;exc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Not found'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s1"&gt;'status'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'fail'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="s1"&gt;'message'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Here we are explicitly telling Flask to return a &lt;span class="caps"&gt;JSON&lt;/span&gt; response instead of the
usual 404 page. This can be done for other error handlers as well.
We will talk about this &lt;code&gt;marshal_with&lt;/code&gt; thing soon.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;1&lt;/span&gt;
&lt;span class="code-line"&gt;2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Enable CORS&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;CORS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Since we are building a &lt;span class="caps"&gt;REST&lt;/span&gt; application that will potentially be accessed from
different domains (i.e. not the same domain that our application is hosted on),
we must enable &lt;a href="https://en.wikipedia.org/wiki/Cross-origin_resource_sharing"&gt;&lt;span class="caps"&gt;CORS&lt;/span&gt;&lt;/a&gt;.
Luckily, this is very easily done with Flask. All you have to do is use the
&lt;a href="https://flask-cors.readthedocs.io/en/latest/"&gt;flask-cors&lt;/a&gt; package and add the
above line in your code!&lt;/p&gt;
&lt;h3&gt;simple_rest/schemas.py&lt;/h3&gt;
&lt;p&gt;This file will hold our response schemas. In other words, this file will have
classes that describe the schema of the responses that come from our &lt;span class="caps"&gt;REST&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Remember the &lt;code&gt;marshal_with&lt;/code&gt; thing we ignored earlier? It uses those schemas
to check if the response of our endpoints is correct, and if it is, it
converts them to the right format.&lt;/p&gt;
&lt;p&gt;For now we only got some empty schemas, and the error schema we saw being used earlier:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="code-line"&gt; 1&lt;/span&gt;
&lt;span class="code-line"&gt; 2&lt;/span&gt;
&lt;span class="code-line"&gt; 3&lt;/span&gt;
&lt;span class="code-line"&gt; 4&lt;/span&gt;
&lt;span class="code-line"&gt; 5&lt;/span&gt;
&lt;span class="code-line"&gt; 6&lt;/span&gt;
&lt;span class="code-line"&gt; 7&lt;/span&gt;
&lt;span class="code-line"&gt; 8&lt;/span&gt;
&lt;span class="code-line"&gt; 9&lt;/span&gt;
&lt;span class="code-line"&gt;10&lt;/span&gt;
&lt;span class="code-line"&gt;11&lt;/span&gt;
&lt;span class="code-line"&gt;12&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserSchema&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;pass&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserResponseSchema&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;pass&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UsersResponseSchema&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;pass&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ErrorSchema&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;This error schema is basically telling marshmallow that our 404 error handler
should return a response with a status and a message, both formatted as strings.&lt;/p&gt;
&lt;h3&gt;simple_rest/store.py&lt;/h3&gt;
&lt;p&gt;This is the dumbest module present in this project. It defines a dictionary
that will be used as a database. I’m doing this so that we can focus in things
other than dealing with a database, which is already convoluted enough just by itself.&lt;/p&gt;
&lt;h3&gt;simple_rest/views.py&lt;/h3&gt;
&lt;p&gt;In this file I have defined two skeleton classes that will define the methods
that can be used to access our user resource. These classes are the main
part of this project, but they are empty for now.&lt;/p&gt;
&lt;h3&gt;simple_rest/validators.py&lt;/h3&gt;
&lt;p&gt;Despite being quite comprehensive, marshmallow fields can’t be used to validate
all possible cases. Since webargs uses the same fields and validation rules
as marshmallow, the same logic applies to it.&lt;/p&gt;
&lt;p&gt;Therefore, we might need to implement some validators of our own. In this file,
I have defined a validator for the user age. Basically, when someone sends
some user information (payload) over to our server, we want to verify if it
not smaller than 0. We could do that in our views, but it is interesting to
keep views as simple as possible. Also, the validation of data is a responsibility
of webargs and marshmallow, so we should keep the validation there, obeying the
&lt;a href="https://en.wikipedia.org/wiki/Separation_of_concerns"&gt;separation of concerns&lt;/a&gt; principle.&lt;/p&gt;
&lt;p&gt;Our validator if very simple and looks like this:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;1&lt;/span&gt;
&lt;span class="code-line"&gt;2&lt;/span&gt;
&lt;span class="code-line"&gt;3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;validate_age&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;ValidationError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Age must be greater than 0.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;h3&gt;tests/conftest.py&lt;/h3&gt;
&lt;p&gt;This file defines configurations for our tests. It is a good practice to keep
most of our &lt;a href="https://docs.pytest.org/en/latest/fixture.html"&gt;pytest fixtures&lt;/a&gt; in a &lt;code&gt;conftest.py&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;Here I’m also giving you a good boilerplate for your Flask &lt;span class="caps"&gt;API&lt;/span&gt; tests. Simply use
the &lt;code&gt;client&lt;/code&gt; fixture to build your tests and you’re good to go.&lt;/p&gt;
&lt;p&gt;I also define a &lt;code&gt;setup_db&lt;/code&gt; fixture that will be run on every test, creating and
cleaning the database. You might want to tune this fixture so that it runs only on
specific tests that require writing on the database.&lt;/p&gt;
&lt;h3&gt;tests/test_views.py&lt;/h3&gt;
&lt;p&gt;Here we are going to build some functional tests for our views. We are not going
to mock the database (even because it’s a simple dictionary) or anything.
Have in mind that those tests would be considerably slower than actual unit tests.&lt;/p&gt;
&lt;p&gt;So, you have basically two options there:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mock everything.&lt;/li&gt;
&lt;li&gt;Keep your views thin and simple to test and throw your logic somewhere else.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I highly recommend you follow the second path.&lt;/p&gt;
&lt;h1&gt;Summary&lt;/h1&gt;
&lt;p&gt;In this article we have covered some of the current solutions for building
a &lt;span class="caps"&gt;REST&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; with Python. We focused on the solutions that are compatible with
the Flask microframework.&lt;/p&gt;
&lt;p&gt;We then reviewed the project skeleton I have created for this &lt;span class="caps"&gt;API&lt;/span&gt;. In the next
post, which I plan to release next week, we are going to fill those files and
create our actual application step by step.&lt;/p&gt;</content><category term="REST"></category><category term="pytest"></category><category term="Flask"></category></entry></feed>